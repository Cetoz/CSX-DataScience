geom_smooth(method = lm)+
ggtitle('Sepal Width V.S. Petal Width')
multiplot(p1,p2)
plot6 <- ggplot(data = iris, aes(x=Species,
y=Sepal.Length))
plot6+
geom_boxplot()+
ggtitle('Boxplot of Species-Sepal.Length')
housing <- txhousing[txhousing$city=='Abilene',]
plot3 <- ggplot(data = housing, aes(x=date,
y=volume))
plot3+
geom_line()+
geom_smooth(method=lm,
se=FALSE)+
ggtitle('Housing market trading volume over time')+
xlab('Date')+
ylab('Volume')
plot+
geom_histogram(aes(x=class),
stat = 'count',
fill='blue',
color='black')+
ggtitle('Car Types')+
xlab('Class')+
ylab('Count')
plot+
geom_bar(aes(x=class),
stat = 'count',
fill='blue',
color='black')+
ggtitle('Car Types')+
xlab('Class')+
ylab('Count')
plot+
geom_bar(aes(x=class),
stat = 'count',
fill='red',
color='black')+
ggtitle('Car Types')+
xlab('Class')+
ylab('Count')
plot+
geom_bar(aes(x=class),
stat = 'count',
fill='red',
color='blue')+
ggtitle('Car Types')+
xlab('Class')+
ylab('Count')
ggplot2()
rm(list = ls())
library(jsonlite)
source('C:/Users/FuHung/Desktop/week_4/course_4/example_3_taipeiApi.R', encoding = 'UTF-8')
url <- 'http://data.ntpc.gov.tw/od/data/api/54DDDC93-589C-4858-9C95-18B2046CC1FC;jsessionid=3D59D691A89C50D9BD6763C844C777CD?$format=json'
jsonData <- fromJSON(url, flatten = TRUE)
write.csv(file = 'test.csv', jsonData , fileEncoding = 'utf-8')
?jsonData
??jsonData
help(jsonData)
??jsonData
jsonData <- fromJSON(url, flatten = TRUE,Encoding('UTF-8'))
write.csv(file = 'test.csv', jsonData , fileEncoding = 'utf-8')
jsonData <- fromJSON(url, flatten = TRUE,Encoding('UTF-8'))
write.csv(file = 'test.csv', jsonData , fileEncoding = 'utf-8')
url <- 'http://data.ntpc.gov.tw/od/data/api/54DDDC93-589C-4858-9C95-18B2046CC1FC;jsessionid=3D59D691A89C50D9BD6763C844C777CD?$format=json'
jsonData <- fromJSON(url, flatten = TRUE,Encoding('UTF-8'))
write.csv(file = 'test.csv', jsonData , fileEncoding = 'utf-8')
install.packages('rfacebook')
install.packages('Rfacebook')
library(Rfacebook)
fb.oauth <- fbOAuth(
app_id='1572720682765349'
app_secret='644aa3ea8a46917a032029555e3513a3'
extended_permissions = TRUE)
fb.oauth <- fbOAuth(
app_id='1572720682765349'
app_secret='644aa3ea8a46917a032029555e3513a3'
extended_permissions = TRUE)
fb.oauth <- fbOAuth(
app_id='1572720682765349'
app_secret='644aa3ea8a46917a032029555e3513a3'
extended_permissions = TRUE)
extended_permissions = TRUE
fb.oauth <- fbOAuth(
app_id='1572720682765349'
app_secret='644aa3ea8a46917a032029555e3513a3'
extended_permissions = TRUE)
fb.oauth <- fbOAuth(
app_id='1572720682765349'
app_secret='644aa3ea8a46917a032029555e3513a3'
extended_permissions = TRUE)
fb.oauth <- fbOAuth(
app_id='1572720682765349'
app_secret='644aa3ea8a46917a032029555e3513a3'
extended_permissions = TRUE)
fb.oauth <- fbOAuth(
app_id ='1572720682765349'
app_secret ='644aa3ea8a46917a032029555e3513a3'
extended_permissions = TRUE)
fb.oauth <- fbOAuth(
app_id ='1572720682765349',
app_secret ='644aa3ea8a46917a032029555e3513a3',
extended_permissions = TRUE)
fb.oauth <- fbOAuth(
app_id ='1572720682765349',
app_secret ='644aa3ea8a46917a032029555e3513a3',
extended_permissions = TRUE)
fb.oauth <- fbOAuth(
app_id ='2154495057900511',
app_secret ='dc11cbcf54f8504a4945898fd39014f7',
extended_permissions = TRUE)
fb.oauth <- fbOAuth(
app_id ='2154495057900511',
app_secret ='dc11cbcf54f8504a4945898fd39014f7',
extended_permissions = TRUE)
fb.oauth <- fbOAuth(
app_id ='2154495057900511',
app_secret ='dc11cbcf54f8504a4945898fd39014f7',
extended_permissions = TRUE)
fb.oauth <- fbOAuth(
app_id ='2154495057900511',
app_secret ='dc11cbcf54f8504a4945898fd39014f7',
extended_permissions = TRUE,
browser = NULL)
fb.oauth <- fbOAuth(
app_id ='2154495057900511',
app_secret ='dc11cbcf54f8504a4945898fd39014f7',
extended_permissions = TRUE,
browser = NULL)
install.packages("devtools")
library(devtools)
install_github("Rfacebook", "pablobarbera", subdir="Rfacebook")
library(Rfacebook)
fb.oauth <- fbOAuth(
app_id ='2154495057900511',
app_secret ='dc11cbcf54f8504a4945898fd39014f7',
extended_permissions = TRUE)
?fbOAuth
?fbOAuth
library(Rfacebook)
fb.oauth <- fbOAuth(
app_id="2154495057900511",
app_secret="dc11cbcf54f8504a4945898fd39014f7",
extended_permissions = TRUE)
me <- getUsers("me",token=fb.oauth)
me$name
fb.oauth <- fbOAuth(
app_id="2154495057900511",
app_secret="dc11cbcf54f8504a4945898fd39014f7",
extended_permissions = FALSE,legacy_permissions = FALSE)
sessionInfo（）
sessionInfo()
Sys.setlocale("LC_ALL", "English")
Sys.getlocale()
Sys.getlocale()
fb.oauth <- fbOAuth(
app_id="2154495057900511",
app_secret="dc11cbcf54f8504a4945898fd39014f7")
options("browser" = NULL)
fb.oauth <- fbOAuth(
app_id="2154495057900511",
app_secret="dc11cbcf54f8504a4945898fd39014f7")
?options
?max
fb.oauth <- fbOAuth(
app_id="2154495057900511",
app_secret="dc11cbcf54f8504a4945898fd39014f7")
fb.oauth <- fbOAuth(
app_id="176020953198397",
app_secret="5cec394306214073ec79fd931859a117",
extended_permissions = TRUE)
me <- getUsers("me", token, private_info = TRUE)
token <- 'EAACEdEose0cBANetxVPyWJJ3UKHCGeypZC8VE1oGkYei4vOqjEf1ISS1mlzi5cABZA9Odj8he3ktCZC2NvhvaOInoLJ2oZBMBaQ1EOLQlmSCDbBzrOkHVtyVqM8hwFRcSFZBR8MMDwVqZB1NZBANyrZCwjvSRCSxiTymjjoXsfiKMky1kFRk6Ld0miIrMUfPxpsZD'
me <- getUsers("me", token, private_info = TRUE)
me$name
rm(list = ls())
token <- 'EAACEdEose0cBANetxVPyWJJ3UKHCGeypZC8VE1oGkYei4vOqjEf1ISS1mlzi5cABZA9Odj8he3ktCZC2NvhvaOInoLJ2oZBMBaQ1EOLQlmSCDbBzrOkHVtyVqM8hwFRcSFZBR8MMDwVqZB1NZBANyrZCwjvSRCSxiTymjjoXsfiKMky1kFRk6Ld0miIrMUfPxpsZD'
page.id <-46251501064
page <- getPage(page.id, token=fb.token, n = 10)
page.id <-46251501064
page <- getPage(page.id, token=token, n = 10)
View(page)
Sys.getlocale()
Sys.setlocale(category = "LC_ALL", locale = "cht")
page <- getPage(page.id, token=token, n = 10)
View(page)
token <- 'EAACEdEose0cBADvsuiG94Nu8IemMOVgsptZB6bJqyyzjjbHbLfadP1yMlLc5kBLtHY6v79oJPSGbgUhAyeMP7kixr5Pqlx8FEPAHycu7VgaTeaXggZBsZCDaPJVhsYMBWh6NLJP3xIzAoqTnnx18Hh2Xs6o6pIDoW5LGeUYwEL5jowYg1ModkXQ04VTXcwZD'
page.id <-46251501064
page <- getPage(page.id, token=token, n = 10)
page <- getPage(page.id, token=token, n = 200)
page <- getPage(page.id, token=token, n = 1000)
page <- getPage(page.id, token=token, n = 500)
?library
docs <- tm_map(docs, removePunctuation)
library(tm)
docs <- tm_map(docs, removePunctuation)
token <- 'EAACEdEose0cBAMu976ZCwkLlVqwVUqLJWNwxcBuTZAxiSwEhuWZArudPTiFIfThnsNZAaZBmdE13cWDEmHRdzHRdVLYPzVX6li9cqhgZAmQUYLYycacUckSroyZBkVSO7jRgWZAthhMKEZBdGZBQpzV1eJODZAZBXMwmHP4Ei8HZAY1jctU7mFMtQcBFIbMDyZC2fRoPUZD'
page.id <-46251501064
page <- getPage(page.id, token=token, n = 100)
library(Rfacebook)
token <- 'EAACEdEose0cBAMu976ZCwkLlVqwVUqLJWNwxcBuTZAxiSwEhuWZArudPTiFIfThnsNZAaZBmdE13cWDEmHRdzHRdVLYPzVX6li9cqhgZAmQUYLYycacUckSroyZBkVSO7jRgWZAthhMKEZBdGZBQpzV1eJODZAZBXMwmHP4Ei8HZAY1jctU7mFMtQcBFIbMDyZC2fRoPUZD'
page.id <-46251501064
page <- getPage(page.id, token=token, n = 100)
docs <- Corpus(VectorSource(page$message))
toSpace <- content_transformer(function(x, pattern) {
return (gsub(pattern, " ", x))}
)
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, stripWhitespace)
inspect(docs[1])
inspect(docs[3])
docs1 <- Corpus(VectorSource(page$message))
toSpace <- content_transformer(function(x, pattern) {
return (gsub(pattern, " ", x))}
)
docs1 <- tm_map(docs1, removePunctuation)
docs1 <- tm_map(docs1, removeNumbers)
docs1 <- tm_map(docs1, stripWhitespace)
inspect(docs[1])
library(tm)
library(NLP)
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, stripWhitespace)
inspect(docs[1])
inspect(docs[1])
sessionInfo()
install.packages('tm')
library(tm)
library(Rfacebook)
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, stripWhitespace)
inspect(docs[1])
library(Rfacebook)
library(tm)
token <- 'EAACEdEose0cBAMu976ZCwkLlVqwVUqLJWNwxcBuTZAxiSwEhuWZArudPTiFIfThnsNZAaZBmdE13cWDEmHRdzHRdVLYPzVX6li9cqhgZAmQUYLYycacUckSroyZBkVSO7jRgWZAthhMKEZBdGZBQpzV1eJODZAZBXMwmHP4Ei8HZAY1jctU7mFMtQcBFIbMDyZC2fRoPUZD'
page.id <-46251501064
page <- getPage(page.id, token=token, n = 100)
library(Rfacebook)
install.packages('Rfacebook')
token <- 'EAACEdEose0cBAMu976ZCwkLlVqwVUqLJWNwxcBuTZAxiSwEhuWZArudPTiFIfThnsNZAaZBmdE13cWDEmHRdzHRdVLYPzVX6li9cqhgZAmQUYLYycacUckSroyZBkVSO7jRgWZAthhMKEZBdGZBQpzV1eJODZAZBXMwmHP4Ei8HZAY1jctU7mFMtQcBFIbMDyZC2fRoPUZD'
page.id <-46251501064
page <- getPage(page.id, token=token, n = 100)
library(Rfacebook)
page <- getPage(page.id, token=token, n = 100)
page <- getPage(page.id, token=token, n = 100)
token <- 'EAACEdEose0cBALUXJKJ4XuROSf4tLoSLAShlV2EQ9Gc24jiXG65sPNP0rDrrNocDvmv5m2hGqTCVjzLYohZC2iyHrWZCrCbjUZCwMzV4VbamgIc0EGrjGyKolAI68gMq4H2RCemWZBBOZAnVhCd91fPlBAXr3I9oKraxrTGk6JXB9w67pmDfnE30dejhwrmZARIMfohxHPQVkqZCLU45YLN'
page <- getPage(page.id, token=token, n = 100)
docs <- Corpus(VectorSource(page$message))
toSpace <- content_transformer(function(x, pattern) {
return (gsub(pattern, " ", x))}
)
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, stripWhitespace)
inspect(docs[1])
inspect(docs[c(1,10)])
inspect(docs[1:10])
docs <- tm_map(docs, toSpace, "，")
inspect(docs[1:10])
message <- '台灣和美國又多了一條直飛航線，而我們的好朋友，美國眾議院外交委員會的羅伊斯（*Ed Royce,）主席，正是搭乘「桃園-加州安大略」的首航班機來到台灣。他不只參與推動這條航線，更是《台灣旅行法》最重要的推手之一。
docs <- Corpus(VectorSource(message))
docs <- tm_map(docs, removePunctuation)
docs
)
inspect(docs)
)
)))
library(tm)
message <- '台灣和美國又多了一條直飛航線，而我們的好朋友，美國眾議院外交委員會的羅伊斯（*Ed Royce,）主席，正是搭乘「桃園-加州安大略」的首航班機來到台灣。他不只參與推動這條航線，更是《台灣旅行法》最重要的推手之一。
docs <- Corpus(VectorSource(message))
5
2
)
library(wordcloud)
layout(matrix(c(1, 2), nrow=2), heights=c(1, 4))
colors <- brewer.pal(5,'Dark2')
text(x=0.5, y=0.5, "Tsai",cex = 3)
text(x=0.5, y=0.5, "Tsai",cex = 3)
plot.new()
text(x=0.5, y=0.5, "Tsai",cex = 3)
library(wordcloud)
colors <- brewer.pal(5,'Dark2')
layout(matrix(c(1, 2), nrow=2), heights=c(1, 4))
plot.new()
wordcloud(docs$docs,docs$Freq,
min.freq = 10,random.order = FALSE,colors = colors,random.color = TRUE)
wordcloud(docs$docs,docs$Freq,
min.freq = 10,random.order = FALSE,colors = colors,random.color = TRUE)
library(dplyr)
library(janeaustenr)
library(tidytext)
install.packages('dplyr')
install.packages('dplyr')
install.packages('dplyr')
source('C:/Users/FuHung/Downloads/script (1).R', echo=TRUE)
source('C:/Users/FuHung/Downloads/script (1).R', echo=TRUE)
rm(list=ls())
source('C:/Users/FuHung/Downloads/script (1).R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(dplyr)
library(tidyr)
path <- "C:\\Users\\FuHung\\Documents\\GitHub\\CSX-DataScience\\Kaggle Presentation"
aisles <- fread(file.path(path, "aisles.csv"))
departments <- fread(file.path(path, "departments.csv"))
orderp <- fread(file.path(path, "order_products__prior.csv"))
rm(list=ls())
gc()
path <- "C:\\Users\\FuHung\\Documents\\GitHub\\CSX-DataScience\\Kaggle Presentation"
aisles <- fread(file.path(path, "aisles.csv"))
departments <- fread(file.path(path, "departments.csv"))
orderp <- fread(file.path(path, "order_products__prior.csv"))
library(xgboost)
library(ggplot2)
params <- list(
"objective"           = "reg:logistic",
"eval_metric"         = "logloss",
"eta"                 = 0.1,
"max_depth"           = 6,
"min_child_weight"    = 10,
"gamma"               = 0.70,
"subsample"           = 0.76,
"colsample_bytree"    = 0.95,
"alpha"               = 2e-05,
"lambda"              = 10
)
subtrain <- train %>% sample_frac(0.1)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(dplyr)
library(tidyr)
path <- "C:\\Users\\FuHung\\Documents\\GitHub\\CSX-DataScience\\Kaggle Presentation"
aisles <- fread(file.path(path, "aisles.csv"))
departments <- fread(file.path(path, "departments.csv"))
orderp <- fread(file.path(path, "order_products__prior.csv"))
ordert <- fread(file.path(path, "order_products__train.csv"))
orders <- fread(file.path(path, "orders.csv"))
products <- fread(file.path(path, "products.csv"))
aisles$aisle <- as.factor(aisles$aisle)
departments$department <- as.factor(departments$department)
orders$eval_set <- as.factor(orders$eval_set)
products$product_name <- as.factor(products$product_name)
library(magrittr)
products <- products %>%
inner_join(aisles) %>% inner_join(departments) %>%
select(-aisle_id, -department_id)
rm(aisles, departments)
ordert$user_id <- orders$user_id[match(ordert$order_id, orders$order_id)]
orders_products <- orders %>% inner_join(orderp, by = "order_id")
head(orders_products)
rm(orderp)
gc()
memory.limit(size=10000)
prd <- orders_products %>%
arrange(user_id, order_number, product_id) %>%
group_by(user_id, product_id) %>%
mutate(product_time = row_number()) %>%
ungroup() %>%
group_by(product_id) %>%
summarise(
prod_orders = n(),
prod_reorders = sum(reordered),
prod_first_orders = sum(product_time == 1),
prod_second_orders = sum(product_time == 2)
)
head(prd)
prd$prod_reorder_probability <- prd$prod_second_orders / prd$prod_first_orders
prd$prod_reorder_times <- 1 + prd$prod_reorders / prd$prod_first_orders
prd$prod_reorder_ratio <- prd$prod_reorders / prd$prod_orders
prd <- prd %>% select(-prod_reorders, -prod_first_orders, -prod_second_orders)
head(prd)
rm(products)
gc()
users <- orders %>%
filter(eval_set == "prior") %>%
group_by(user_id) %>%
summarise(
user_orders = max(order_number),
user_period = sum(days_since_prior_order, na.rm = T),
user_mean_days_since_prior = mean(days_since_prior_order, na.rm = T)
)
head(users)
us <- orders_products %>%
group_by(user_id) %>%
summarise(
user_total_products = n(),
user_reorder_ratio = sum(reordered == 1) / sum(order_number > 1),
user_distinct_products = n_distinct(product_id)
)
head(us)
users <- users %>% inner_join(us)
users$user_average_basket <- users$user_total_products / users$user_orders
us <- orders %>%
filter(eval_set != "prior") %>%
select(user_id, order_id, eval_set,
time_since_last_order = days_since_prior_order)
users <- users %>% inner_join(us)
head(users)
rm(us)
gc()
data <- orders_products %>%
group_by(user_id, product_id) %>%
summarise(
up_orders = n(),
up_first_order = min(order_number),
up_last_order = max(order_number),
up_average_cart_position = mean(add_to_cart_order))
rm(orders_products, orders)
data <- data %>%
inner_join(prd, by = "product_id") %>%
inner_join(users, by = "user_id")
data$up_order_rate <- data$up_orders / data$user_orders
data$up_orders_since_last_order <- data$user_orders - data$up_last_order
data$up_order_rate_since_first_order <- data$up_orders / (data$user_orders - data$up_first_order + 1)
data <- data %>%
left_join(ordert %>% select(user_id, product_id, reordered),
by = c("user_id", "product_id"))
rm(ordert, prd, users)
gc()
train <- as.data.frame(data[data$eval_set == "train",])
train$eval_set <- NULL
train$user_id <- NULL
train$product_id <- NULL
train$order_id <- NULL
train$reordered[is.na(train$reordered)] <- 0
test <- as.data.frame(data[data$eval_set == "test",])
test$eval_set <- NULL
test$user_id <- NULL
test$reordered <- NULL
rm(data)
gc()
library(xgboost)
library(ggplot2)
params <- list(
"objective"           = "reg:logistic",
"eval_metric"         = "logloss",
"eta"                 = 0.1,
"max_depth"           = 6,
"min_child_weight"    = 10,
"gamma"               = 0.70,
"subsample"           = 0.76,
"colsample_bytree"    = 0.95,
"alpha"               = 2e-05,
"lambda"              = 10
)
subtrain <- train %>% sample_frac(0.1)
X <- xgb.DMatrix(as.matrix(subtrain %>% select(-reordered)), label = subtrain$reordered)
model <- xgboost(data = X, params = params, nrounds = 80)
importance <- xgb.importance(colnames(X), model = model)
xgb.ggplot.importance(importance)
install.packages('Ckmeans.1d.dp')
library(xgboost)
library(ggplot2)
library(Ckmeans.1d.dp)
params <- list(
"objective"           = "reg:logistic",
"eval_metric"         = "logloss",
"eta"                 = 0.1,
"max_depth"           = 6,
"min_child_weight"    = 10,
"gamma"               = 0.70,
"subsample"           = 0.76,
"colsample_bytree"    = 0.95,
"alpha"               = 2e-05,
"lambda"              = 10
)
subtrain <- train %>% sample_frac(0.1)
X <- xgb.DMatrix(as.matrix(subtrain %>% select(-reordered)), label = subtrain$reordered)
model <- xgboost(data = X, params = params, nrounds = 80)
importance <- xgb.importance(colnames(X), model = model)
xgb.ggplot.importance(importance)
rm(X, importance, subtrain)
gc()
X <- xgb.DMatrix(as.matrix(test %>% select(-order_id, -product_id)))
test$reordered <- predict(model, X)
test$reordered <- (test$reordered > 0.21) * 1
submission <- test %>%
filter(reordered == 1) %>%
group_by(order_id) %>%
summarise(
products = paste(product_id, collapse = " ")
)
missing <- data.frame(
order_id = unique(test$order_id[!test$order_id %in% submission$order_id]),
products = "None"
)
submission <- submission %>% bind_rows(missing) %>% arrange(order_id)
write.csv(submission, file = "submit.csv", row.names = F)
head(submission)
setwd("~/GitHub/CSX-DataScience/week_10")
rm(list=ls())
order = read.csv("order_products__train.csv",nrows=50000)
product = read.csv("products.csv")
aisle = read.csv("aisles.csv")
setwd("~/GitHub/CSX-DataScience/Kaggle Presentation")
order = read.csv("order_products__train.csv",nrows=50000)
product = read.csv("products.csv")
aisle = read.csv("aisles.csv")
order <- order %>%
inner_join(product,by = "product_id") %>%       inner_join(aisle,by = "aisle_id")%>%
select(order_id,aisle)
basket <- ddply(order,.(order_id),function(df1)paste(df1$aisle,collapse = ","))
library(plyr)
detach("package:plyr", unload=TRUE)
detach("package:dplyr", unload=TRUE)
library(plyr)
detach("package:plyr", unload=TRUE)
