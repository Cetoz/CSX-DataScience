inner_join(aisles) %>%
inner_join(departments) %>%
select(-aisle_id,-department_id)
rm(aisles,departments)
orderp <- orderp %>% select(order_id,product_id) %>% left_join(products)
ordert <- ordert %>% select(order_id,product_id) %>% left_join(products)
orderpt <- rbind(orderp,ordert)
rm(ordert,orderp,products)
orderpt <- orderpt %>% select(order_id,aisle)
gc()
test <- orderpt[1:500,]
View(test)
unique(test$order_id)
?sample
sample(unique(test$order_id),20)
sampleorder <- sample(unique(test$order_id),20)
filter(test,order_id=sampleorder)
filter(test,order_id==sampleorder)
sampleorder
str(test)
sampleorder <- sample(unique(test$order_id),20)
filter(test,order_id==sampleorder)
sampleorder
sampleorder[2]
sampleorder[5]
filter(test,order_id %in% sampleorder)
samplenumber <- sample(unique(orderpt$order_id),10000)
sampleorder <- filter(orderpt,order_id %in% samplenumber)
View(sampleorder)
View(sampleorder)
rm(orderpt,test)
gc()
paste(sampleorder$aisle[1:10])
sampleorder$aisle[1:10]
unique(sampleorder$aisle[1:10])
test <- unique(sampleorder$order_id)
unique(sampleorder$aisle[1:10])
paste(unique(sampleorder$aisle[1:10]),sep = ',')
paste(unique(sampleorder$aisle[1:10]),collapse = '')
paste(unique(sampleorder$aisle[1:10]),sep = ',')
test$aisle <- paste(unique(sampleorder$aisle[1:10]),sep = ',')
test <- unique(sampleorder$order_id)
test <- data.frame(unique(sampleorder$order_id))
View(test)
test <- data.frame(order_id=unique(sampleorder$order_id))
View(test)
test$aisle <- sampleorder$aisle[sampleorder$order_id=test$order_id]
test$aisle <- sampleorder$aisle[sampleorder$order_id==test$order_id]
test <- ddply(sampleorder,c('order_id'),function(df1)paste(df1$aisle,collapse = ','))
View(test)
rm(test)
test <- ddply(sampleorder,c('order_id'),function(df1)paste(df1$aisle,collapse = ','))
View(test)
test <- ddply(sampleorder,c('order_id'),function(df1)paste(unique(df1$aisle),collapse = ','))
test[1,2]
View(test)
sampleorder <- ddply(sampleorder,c('order_id'),function(df1)paste(unique(df1$aisle),collapse = ','))
rm(test)
View(sampleorder)
write.csv(sampleorder,'list.csv')
setwd("~/GitHub/CSX-DataScience/week_10")
setwd("~/GitHub/CSX-DataScience/week_10")
write.csv(sampleorder,'list.csv')
write.csv(sampleorder,'list.csv',row.names = FALSE)
?read.transactions
list <- read.transactions(file = 'list.csv',
format = 'basket',
sep = ',',
cols = 1)
list <- read.transactions(file = 'list.csv',
format = 'basket',
sep = ',',
cols = 1,
skip = 1)
inspect(list)
head(inspect(list))
str(list)
list@itemInfo$labels <- gsub("\"","",,list@itemInfo$labels)
basket_rules <- apriori(list,
parameter = list(sup = 0.01, conf = 0.5,target="rules"))
inspect(basket_rules)
inspect(basket_rules)
load("titanic.raw.rdata")
str(titanic.raw)
require(arules)
rule <- apriori(titanic.raw,
# min support & confidence, 最小規則長度(lhs+rhs)
parameter=list(minlen=3, supp=0.1, conf=0.7),
appearance = list(default="lhs",
rhs=c("Survived=No", "Survived=Yes")
# 右手邊顯示的特徵
)
)
inspect(rule)
basket_rules <- apriori(list,
parameter = list(sup = 0.01, conf = 0.01,target="rules"))
inspect(basket_rules)
View(titanic.raw)
?gsub
list@itemInfo$labels <- gsub("\"","",,x=list@itemInfo$labels)
basket_rules <- apriori(list,
parameter = list(sup = 0.01, conf = 0.01,target="rules"))
inspect(basket_rules)
list@itemInfo$labels
rule <- apriori(titanic.raw,
# min support & confidence, 最小規則長度(lhs+rhs)
parameter=list(minlen=3, supp=0.1, conf=0.7),
appearance = list(default="lhs",
rhs=c("Survived=No", "Survived=Yes")
# 右手邊顯示的特徵
)
)
inspect(rule)
basket_rules <- apriori(list,
parameter = list(sup = 0.01, conf = 0.01,target="rules"))
list <- read.transactions(file = 'list.csv',
format = 'basket',
sep = ',',
cols = 1,
skip = 1,
rm.duplicates = TRUE)
?read.transactions
df_groceries <- read.csv("groceries.csv")
df_groceries <- read.csv("groceries.csv")
df_sorted <- df_groceries[order(df_groceries$Member_number),]
df_sorted$Member_number <- as.numeric(df_sorted$Member_number)
df_itemList <- ddply(df_groceries,c("Member_number","Date"),
function(df1)paste(df1$itemDescription,
collapse = ","))
View(df_itemList)
df_itemList$Member_number <- NULL
df_itemList$Date <- NULL
View(df_itemList)
colnames(df_itemList) <- c("itemList")
write.csv(df_itemList,"ItemList.csv", row.names = TRUE)
txn = read.transactions(file="ItemList.csv", rm.duplicates= TRUE, format="basket",sep=",",cols=1)
txn@itemInfo$labels <- gsub("\"","",,txn@itemInfo$labels)
txn@itemInfo$labels <- gsub("\"","",,x=txn@itemInfo$labels)
basket_rules <- apriori(txn,parameter = list(sup = 0.01, conf = 0.5,target="rules"))
inspect(basket_rules)
if(sessionInfo()['basePkgs']=="tm" | sessionInfo()['otherPkgs']=="tm"){
detach(package:tm, unload=TRUE)
}
inspect(basket_rules)
basket_rules <- apriori(txn,parameter = list(sup = 0.01, conf = 0.5,target="rules"))
View(sampleorder)
sampleorder$order_id <- NULL
colnames(sampleorder) <- c('itemlist')
write.csv(sampleorder,'list.csv',row.names = TRUE)
list <- read.transactions(file = 'list.csv',
format = 'basket',
sep = ',',
cols = 1,
rm.duplicates = TRUE)
basket_rules <- apriori(list,
parameter = list(sup = 0.01, conf = 0.01,target="rules"))
list <- read.transactions(file = 'list.csv',
format = 'basket',
sep = ',',
skip = 1
cols = 1,
rm.duplicates = TRUE)
basket_rules <- apriori(list,
parameter = list(sup = 0.01, conf = 0.01,target="rules"))
list <- read.transactions(file = 'list.csv',
format = 'basket',
sep = ',',
skip = 1
cols = 1,
rm.duplicates = TRUE)
list <- read.transactions(file = 'list.csv',
format = 'basket',
sep = ',',
skip = 1,
cols = 1,
rm.duplicates = TRUE)
basket_rules <- apriori(list,
parameter = list(sup = 0.01, conf = 0.01,target="rules"))
list <- read.transactions(file = 'list.csv',
format = 'basket',
sep = ',',
skip = 1,
cols = 1,
rm.duplicates = TRUE)
basket_rules <- apriori(list,
parameter = list(sup = 0.01, conf = 0.01,target="rules"))
rm(list=ls())
library(data.table)
library(dplyr)
library(tidyr)
path <- "C:\\Users\\FuHung\\Documents\\GitHub\\CSX-DataScience\\Kaggle Presentation"
aisles <- fread(file.path(path, "aisles.csv"))
departments <- fread(file.path(path, "departments.csv"))
orderp <- fread(file.path(path, "order_products__prior.csv"))
ordert <- fread(file.path(path, "order_products__train.csv"))
orders <- fread(file.path(path, "orders.csv"))
products <- fread(file.path(path, "products.csv"))
aisles$aisle <- as.factor(aisles$aisle)
departments$department <- as.factor(departments$department)
orders$eval_set <- as.factor(orders$eval_set)
products$product_name <- as.factor(products$product_name)
products <- products %>%
inner_join(aisles) %>% inner_join(departments) %>%
select(-aisle_id, -department_id)
rm(aisles, departments)
View(products)
ordert$user_id <- orders$user_id[match(ordert$order_id, orders$order_id)]
View(ordert)
View(orders)
orders_products <- orders %>% inner_join(orderp, by = "order_id")
rm(orderp)
gc()
View(orders_products)
prd <- orders_products %>%#只有prior的資料
arrange(user_id, order_number, product_id) %>%
group_by(user_id, product_id) %>%
mutate(product_time = row_number()) %>%
ungroup() %>%
group_by(product_id) %>%
summarise(
prod_orders = n(),
prod_reorders = sum(reordered),
prod_first_orders = sum(product_time == 1),
prod_second_orders = sum(product_time == 2)
)
prd$prod_reorder_probability <- prd$prod_second_orders / prd$prod_first_orders
prd$prod_reorder_times <- 1 + prd$prod_reorders / prd$prod_first_orders
prd$prod_reorder_ratio <- prd$prod_reorders / prd$prod_orders
View(prd)
prd <- prd %>% select(-prod_reorders, -prod_first_orders, -prod_second_orders)
rm(products)
gc()
users <- orders %>%
filter(eval_set == "prior") %>%#挑prior出來做
group_by(user_id) %>%
summarise(
user_orders = max(order_number),#該用戶總訂單
user_period = sum(days_since_prior_order, na.rm = T),#該用戶從第一筆訂單到最後一筆訂單總時長
user_mean_days_since_prior = mean(days_since_prior_order, na.rm = T)#兩筆訂單平均間隔
)
us <- orders_products %>%#只有prior
group_by(user_id) %>%
summarise(
user_total_products = n(),#總購買產品數
user_reorder_ratio = sum(reordered == 1) / sum(order_number > 1),#reorder時再次購買該件商品的機率
user_distinct_products = n_distinct(product_id)#購買的產品種類數
)
users <- users %>% inner_join(us)#users和us合併
users$user_average_basket <- users$user_total_products / users$user_orders
us <- orders %>%
filter(eval_set != "prior") %>%#挑出非prior資料(train或test)
select(user_id, order_id, eval_set,
time_since_last_order = days_since_prior_order)
users <- users %>% inner_join(us)#users和us合併
rm(us)
gc()
data <- orders_products %>%
group_by(user_id, product_id) %>%
summarise(
up_orders = n(),#某用戶購買該產品的次數
up_first_order = min(order_number),#第幾筆訂單中首次出現該產品
up_last_order = max(order_number),#第幾筆訂單中最後一次出現該產品
up_average_cart_position = mean(add_to_cart_order))#平均購物車位置
rm(orders_products, orders)
data <- data %>%
inner_join(prd, by = "product_id") %>%#合併產品訊息
inner_join(users, by = "user_id")#合併用戶訊息
data$up_order_rate <- data$up_orders / data$user_orders#該用戶訂單包含該產品的機率
data$up_orders_since_last_order <- data$user_orders - data$up_last_order#最後一次購買該產品後的新訂單數
data$up_order_rate_since_first_order <- data$up_orders / (data$user_orders - data$up_first_order + 1)#首次購買該產品後該用戶訂單包含該產品的機率
data <- data %>%
left_join(ordert %>% select(user_id, product_id, reordered),
by = c("user_id", "product_id"))#將training data裡reorder一欄加入
rm(ordert, prd, users)
gc()
View(data)
rm(list=ls())
gc()
gc()
path <- "C:\\Users\\FuHung\\Documents\\GitHub\\CSX-DataScience\\Kaggle Presentation"
aisles <- fread(file.path(path, "aisles.csv"))
departments <- fread(file.path(path, "departments.csv"))
orders <- fread(file.path(path, "orders.csv"))
aisles$aisle <- as.factor(aisles$aisle)
products <- fread(file.path(path, "products.csv"))
orderp <- fread(file.path(path, "order_products__prior.csv"))
ordert <- fread(file.path(path, "order_products__train.csv"))
library(data.table)
library(dplyr)
library(tidyr)
path <- "C:\\Users\\FuHung\\Documents\\GitHub\\CSX-DataScience\\Kaggle Presentation"
aisles <- fread(file.path(path, "aisles.csv"))
departments <- fread(file.path(path, "departments.csv"))
orderp <- fread(file.path(path, "order_products__prior.csv"))
ordert <- fread(file.path(path, "order_products__train.csv"))
orders <- fread(file.path(path, "orders.csv"))
products <- fread(file.path(path, "products.csv"))
aisles$aisle <- as.factor(aisles$aisle)
departments$department <- as.factor(departments$department)
orders$eval_set <- as.factor(orders$eval_set)
products$product_name <- as.factor(products$product_name)
products <- products %>%
inner_join(aisles) %>% inner_join(departments) %>%
select(-aisle_id, -department_id)
rm(aisles, departments)
View(ordert)
View(orders)
View(ordert)
ordert$user_id <- orders$user_id[match(ordert$order_id, orders$order_id)]
orders_products <- orders %>% inner_join(orderp, by = "order_id")
rm(orderp)
gc()
rm(list=ls())
gc
gc()
path <- "C:\\Users\\FuHung\\Documents\\GitHub\\CSX-DataScience\\Kaggle Presentation"
aisles <- fread(file.path(path, "aisles.csv"))
departments <- fread(file.path(path, "departments.csv"))
orderp <- fread(file.path(path, "order_products__prior.csv"))
ordert <- fread(file.path(path, "order_products__train.csv"))
orders <- fread(file.path(path, "orders.csv"))
products <- fread(file.path(path, "products.csv"))
aisles$aisle <- as.factor(aisles$aisle)
departments$department <- as.factor(departments$department)
orders$eval_set <- as.factor(orders$eval_set)
products$product_name <- as.factor(products$product_name)
products <- products %>%
inner_join(aisles) %>% inner_join(departments) %>%
select(-aisle_id, -department_id)
rm(aisles, departments)
View(ordert)
View(orders)
rm(list=ls())
library(data.table)
library(dplyr)
library(tidyr)
path <- "C:\\Users\\FuHung\\Documents\\GitHub\\CSX-DataScience\\Kaggle Presentation"
aisles <- fread(file.path(path, "aisles.csv"))
departments <- fread(file.path(path, "departments.csv"))
ordert <- fread(file.path(path, "order_products__train.csv"))
orderp <- fread(file.path(path, "order_products__prior.csv"))
orders <- fread(file.path(path, "orders.csv"))
products <- fread(file.path(path, "products.csv"))
departments$department <- as.factor(departments$department)
aisles$aisle <- as.factor(aisles$aisle)
orders$eval_set <- as.factor(orders$eval_set)
products$product_name <- as.factor(products$product_name)
products <- products %>%
inner_join(aisles) %>% inner_join(departments) %>%
select(-aisle_id, -department_id)
rm(aisles, departments)
View(orders)
View(ordert)
View(orderp)
ordert$user_id <- orders$user_id[match(ordert$order_id, orders$order_id)]
orders_products <- orders %>% inner_join(orderp, by = "order_id")
View(orders_products)
rm(orderp)
gc()
prd <- orders_products %>%#只有prior的資料
arrange(user_id, order_number, product_id) %>%
group_by(user_id, product_id) %>%
mutate(product_time = row_number()) %>%
ungroup() %>%
group_by(product_id) %>%
summarise(
prod_orders = n(),
prod_reorders = sum(reordered),
prod_first_orders = sum(product_time == 1),#屬於某人的第一筆訂單
prod_second_orders = sum(product_time == 2)#屬於某人的第二筆訂單
)
View(prd)
prd$prod_reorder_probability <- prd$prod_second_orders / prd$prod_first_orders
prd$prod_reorder_times <- 1 + prd$prod_reorders / prd$prod_first_orders
prd$prod_reorder_ratio <- prd$prod_reorders / prd$prod_orders
prd <- prd %>% select(-prod_reorders, -prod_first_orders, -prod_second_orders)#丟掉沒用的feature
users <- orders %>%
filter(eval_set == "prior") %>%#只有prior的資料
group_by(user_id) %>%#user_id分組
summarise(
user_orders = max(order_number),#該用戶總訂單
user_period = sum(days_since_prior_order, na.rm = T),#該用戶從第一筆訂單到最後一筆訂單總時長
user_mean_days_since_prior = mean(days_since_prior_order, na.rm = T)#兩筆訂單平均間隔
)
View(users)
us <- orders_products %>%#只有prior
group_by(user_id) %>%#user_id分組
summarise(
user_total_products = n(),#總購買產品數
user_reorder_ratio = sum(reordered == 1) / sum(order_number > 1),#reorder時再次購買該件商品的機率
user_distinct_products = n_distinct(product_id)#購買的產品種類數
)
View(us)
users <- users %>% inner_join(us)#users和us合併
users$user_average_basket <- users$user_total_products / users$user_orders
View(users)
us <- orders %>%
filter(eval_set != "prior") %>%#挑出非prior資料(train或test)
select(user_id, order_id, eval_set,
time_since_last_order = days_since_prior_order)
users <- users %>% inner_join(us)#users和us合併
rm(us)
gc()
str(users)
any(TRUE)
any(FALSE)
View(orders_products)
data <- orders_products %>%#只有prior資料，一個row對應一個訂單中的一個產品
group_by(user_id, product_id) %>%
summarise(
up_orders = n(),#某用戶購買該產品的次數
up_first_order = min(order_number),#第幾筆訂單中首次出現該產品
up_last_order = max(order_number),#第幾筆訂單中最後一次出現該產品
up_average_cart_position = mean(add_to_cart_order))#平均購物車位置
rm(orders_products, orders)
data <- data %>%
inner_join(prd, by = "product_id") %>%#合併產品訊息
inner_join(users, by = "user_id")#合併用戶訊息
data$up_order_rate <- data$up_orders / data$user_orders#該用戶訂單包含該產品的機率
data$up_orders_since_last_order <- data$user_orders - data$up_last_order#最後一次購買該產品後的新訂單數
data$up_order_rate_since_first_order <- data$up_orders / (data$user_orders - data$up_first_order + 1)#首次購買該產品後該用戶訂單包含該產品的機率
rm(ordert, prd, users)
gc()
train <- as.data.frame(data[data$eval_set == "train",])
train$eval_set <- NULL
train$user_id <- NULL
train$product_id <- NULL
train$order_id <- NULL
train$reordered[is.na(train$reordered)] <- 0
test <- as.data.frame(data[data$eval_set == "test",])
test$eval_set <- NULL
test$user_id <- NULL
test$reordered <- NULL
rm(data)
gc()
library(xgboost)
params <- list(
"objective"           = "reg:logistic",
"eval_metric"         = "logloss",
"eta"                 = 0.1,
"max_depth"           = 6,
"min_child_weight"    = 10,
"gamma"               = 0.70,
"subsample"           = 0.76,
"colsample_bytree"    = 0.95,
"alpha"               = 2e-05,
"lambda"              = 10
)
subtrain <- train %>% sample_frac(0.1)
X <- xgb.DMatrix(as.matrix(subtrain %>% select(-reordered)), label = subtrain$reordered)
train$reordered[is.na(train$reordered)] <- 0
head(kable(products))
library(knitr)
head(kable(products))
head(products)
library(xgboost)
library(xgboost)
params <- list(
"objective"           = "reg:logistic",
"eval_metric"         = "logloss",
"eta"                 = 0.1,
"max_depth"           = 6,
"min_child_weight"    = 10,
"gamma"               = 0.70,
"subsample"           = 0.76,
"colsample_bytree"    = 0.95,
"alpha"               = 2e-05,
"lambda"              = 10
)
subtrain <- train %>% sample_frac(0.1)
X <- xgb.DMatrix(as.matrix(subtrain %>% select(-reordered)), label = subtrain$reordered)
X <- xgb.DMatrix(as.matrix(subtrain %>% select(-reordered)), label = subtrain$reordered)
View(train)
knitr::opts_chunk$set(echo = TRUE)
library(xgboost)
params <- list(
"objective"           = "reg:logistic",
"eval_metric"         = "logloss",
"eta"                 = 0.1,
"max_depth"           = 6,
"min_child_weight"    = 10,
"gamma"               = 0.70,
"subsample"           = 0.76,
"colsample_bytree"    = 0.95,
"alpha"               = 2e-05,
"lambda"              = 10
)
subtrain <- train %>% sample_frac(0.1)
X <- xgb.DMatrix(as.matrix(subtrain %>% select(-reordered)), label = subtrain$reordered)
View(train)
library(xgboost)
params <- list(
"objective"           = "reg:logistic",
"eval_metric"         = "logloss",
"eta"                 = 0.1,
"max_depth"           = 6,
"min_child_weight"    = 10,
"gamma"               = 0.70,
"subsample"           = 0.76,
"colsample_bytree"    = 0.95,
"alpha"               = 2e-05,
"lambda"              = 10
)
subtrain <- train %>% sample_frac(0.1)
X <- xgb.DMatrix(as.matrix(subtrain), label = subtrain$reordered)
source('C:/Users/FuHung/Downloads/script (1).R', echo=TRUE)
source('C:/Users/FuHung/Downloads/script (1).R', echo=TRUE)
library(ggplot2)
install.packages(ggplot2)
install.packages('ggplot2)
install.packages('ggplot2')
install.packages('ggplot2')
